"pathogen https://github.com/tpope/vim-pathogen
execute pathogen#infect()

syntax enable
set number
set hlsearch
set smartindent
set nowrap
set tabstop=8
set shiftwidth=8
set noexpandtab
set clipboard+=unnamed
set nocscopeverbose
filetype indent on
"indent"
filetype plugin on
set omnifunc=syntaxcomplete#Complete
"colorscheme
colorscheme kolor
set spell

function! GetRunningOS()
	if system('uname -v')=~ 'Ubuntu'
		return 'ubuntu'
	else
		return 'fedora'
	endif
endfunction

if !has('nvim')
	if GetRunningOS()=~ 'fedora'
		python from powerline.vim import setup as powerline_setup
		python powerline_setup()
		python del powerline_setup
		set laststatus=2
		set t_Co=256
	endif
endif


"NERDTree ignore file types
let NERDTreeIgnore = ['\.pyc$']
if &term != "xterm"
	let &colorcolumn="80,".join(range(120,999),",")
endif
"highlighting line number"
set cursorline
"mapping
"Tagbar plugin mapping
nmap <F8> :TagbarToggle<CR>
"Toggle NERDTree plugin
nmap <F7> :NERDTreeToggle<CR>
let mapleader="-"
let maplocalleader="\\"
"Move the current line down
map - dd _p
"Delete the current line
noremap <c-d> dd
""Go to beginning of the line
inoremap <c-h> <esc>^i
"Move line down
inoremap <c-j> <esc>:m .+1<cr>==i
"Move line up
inoremap <c-k> <esc>:m .-2<cr>==i
"Go to end of the line
inoremap <c-l> <esc>$a
""Uppercase the current word
"inoremap <c-u> <esc>vawUi
"nnoremap <c-u> vawU<esc>
"Edit vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
""Load vimrc
nnoremap <leader>sv :source $MYVIMRC<cr>
"Surrond the current word with double quotes
nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel
""Surrond the current word with single quotes
nnoremap <leader>' viw<esc>a'<esc>hbi'<esc>lel
"Close current tab
nnoremap tc :tabclose<cr>
"New tab
nnoremap tn :tabnew<cr>
"Go to next tab
nnoremap tj  :tabnext<CR>
"Go to previous tab
nnoremap tk  :tabprev<CR>
"Surrond the selection with double quotes
vnoremap " <esc>`<i"<esc>`>la"<esc>
""Go to normal mode from insert mode
inoremap jk <esc>
"Disable esc key
inoremap <esc> <nop>
""Disable arrows keys! Use vim correctly
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>

onoremap p i(
onoremap b /return<cr>
onoremap in( :<c-u>normal! f(vi(<cr>
onoremap il( :<c-u>normal! F)vi(<cr>
onoremap in[ :<c-u>normal! f[vi[<cr>
onoremap il] :<c-u>normal! F]vi[<cr>

inoremap {      {}<Left>
inoremap {<CR>  {<CR>}<Esc>O
inoremap {{     {
inoremap {}     {}
inoremap [      []<Left>
inoremap [<CR>  [<CR>]<Esc>O
inoremap [[     [
inoremap []     []
inoremap (      ()<Left>
inoremap (<CR>  (<CR>)<Esc>O
inoremap ((     (
inoremap ()     ()

inoremap '      ''<Left>
inoremap ''     ''
inoremap "      ""<Left>
inoremap ""     ""

augroup filetype_html
	autocmd!
	autocmd FileType html nnoremap <buffer> <localleader>f Vatzf
augroup END


"Abbreviations
iabbrev @@ guilherme.sft@gmail.com
iabbrev ccopy Copyright 2014 José Guilherme Vanz, all rights reserved
iabbrev ssig -- <cr>José Guilherme Vanz<cr>guilherme.sft@gmail.com

au BufRead COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" Remove all trailing whitespace when saving
" See http://vim.wikia.com/wiki/Remove_unwanted_spaces
autocmd BufWritePre * :%s/\s\+$//e

let g:ctrlp_working_path_mode = 'ra'

